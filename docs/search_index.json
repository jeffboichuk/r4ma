[
["index.html", "R for Marketing Analytics Welcome", " R for Marketing Analytics Jeffrey Boichuk Steven Mortimer Welcome In this book we’ll cover how to perform quantitative marketing using the R programming language. Whether you are a student searching for real world examples of quantitative marketing or you are a seasoned marketing analyst looking for new methods or ideas to implement at your place of work this is the book for you. First, we’ll cover how to intelligently approach a problem. Second, we’ll go into detail on how to implement a solution using the R programming language. Lastly, we will discuss how to influence marketing decisions via effective communication. This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. "],
["preface.html", "Preface", " Preface Outline the structure of the book, introduce ourselves, etc. Jeffrey Boichuk () is … Steven Mortimer has more than 7 years experience in data science serving clients and businesses across the healthcare, higher education, and media industries. Steven was the first data scientist hired at two different companies where he grew data science as a corporate function. He specializes in team building, rapid prototyping, and practical applications of data science using the R programming language to quickly realize business value. Also, Steven is committed to helping others develop skills in data science. At the University of Virginia (UVA), he created content for a graduate course in Customer Analytics and tutors students needing assistance with statistics-based coursework. Much of Steven’s code is publicly available in his GitHub repositories at https://github.com/StevenMMortimer Steven holds Bachelor’s and Master’s degrees in Statistics from the University of Virginia and is currently pursing a Master’s of Business Administration at UVA’s Darden School of Business. "],
["marketing.html", "1 What is Marketing?", " 1 What is Marketing? What questions to ask, etc. "],
["tools.html", "2 Tools at your Disposal ", " 2 Tools at your Disposal "],
["data.html", "2.1 Data", " 2.1 Data List the types of data. When to use and why. "],
["software.html", "2.2 Software", " 2.2 Software Business Intelligence (BI) Tools Tableau, Domo, Pentaho, Looker Visual Analysis Tools Excel, SPSS, SAS, Minitab Programming Languages Java, Python, Julia, Scala "],
["the-r-programming-language.html", "2.3 The R Programming Language", " 2.3 The R Programming Language Describe the basics of R, specifically relating to “tidy” data principles, the tidyverse and its collection of packages. Describe what is a tbl_df versus a data.frame. Describe the concepts of reproducible research. Show how to load a install and load a library Show how to install our library for the book CITATIONS EXAMPLE You can write citations, too. For example, we are using the bookdown package (Xie 2018) in this sample book, which was built on top of R Markdown and knitr (Xie 2015). References "],
["dataviz.html", "3 Data Visualizations", " 3 Data Visualizations Good marketing tells a story, it evokes an emotion, and elicits a response. The same can be said about good data visualizations. In this chapter we will show you how to use the R package ggplot2 to visualize different types of marketing data to tell your story. "],
["creating-a-canvas.html", "3.1 Creating a Canvas", " 3.1 Creating a Canvas The ggplot2 package is an interesting solution because it does not provide a set of chart types that you can pick and choose. Microsoft Excel has always provided a fixed set of scattercharts, bar charts, and other popular visualizations. In contrast, ggplot2 an extensible system of commands that build literally any picture you’d like to create. Talented R users have created ggplot masterpieces, such as, the picture of Hadley. [ADD HADLEY PICTURE HERE] Every ggplot visualization starts with a canvas. You can create a blank canvas using the function ggplot(). This function takes two arguments: 1) data and 2) mapping. You can think of the data argument as a pallete of information from which to construct the plot and and the mapping as the plan for how to structure that information (e.g. as the x-axis, y-axis, size, shape or color). Supplying these argument still stop short of actually creating a plot library(tidyverse) #&gt; ── Attaching packages ───────────────────────────────────────────────────────────────────────────── tidyverse 1.2.1 ── #&gt; ✔ ggplot2 3.0.0 ✔ purrr 0.2.5 #&gt; ✔ tibble 1.4.2 ✔ dplyr 0.7.7 #&gt; ✔ tidyr 0.8.1 ✔ stringr 1.3.1 #&gt; ✔ readr 1.1.1 ✔ forcats 0.3.0 #&gt; ── Conflicts ──────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ── #&gt; ✖ dplyr::filter() masks stats::filter() #&gt; ✖ dplyr::lag() masks stats::lag() # ggplot(data=iris, mapping=aes()) "],
["adding-layers-of-geoms.html", "3.2 Adding Layers of Geoms", " 3.2 Adding Layers of Geoms Now that you’ve created a blank canvas, you need to add layers to it. In the canvas example above we used the aes() function, which is short for aesthetics. When you define the aesthetics in the top level ggplot() function call, it applies those aesthetics to every layer that subsequently gets applied to the plot. Layers is the core idea of constructing a plot. Every new layer gets added to the canvas via the plus sign (+). As an example, let’s add a set of points to the canvas. You can do this using the geom_point() function. # ggplot(data=iris, mapping=aes()) + # geom_point() A “geom” is shorthand for adding a layer to your plot using a specific geometric shape. Geoms are the heart of the plot because they define whether the plot is a line plot, scatterplot, bar plot, etc. In each of these examples, the geom would be geom_line(), geom_point() or geom_bar(). The ggplot tries to makes things intuitive and easy to remember. However, if you need a list of all the geoms you can find them using tab completion in RStudio. Just type geom_ in your RStudio console window , then press TAB. This will trigger the tab-completion feature in RStudio and show you the list of geoms that are available for you to use. [ADD TAB COMPLETION SCREENSHOT HERE] "],
["adding-labels-axes-and-legends.html", "3.3 Adding Labels, Axes, and Legends", " 3.3 Adding Labels, Axes, and Legends With plots it is important to pay attention to the details. These details make an effective plot and just like Microsoft Excel allows you to add and customize each element, so does ggplot. The trick is knowing which functions to use so in this section we will introduce a laundry list of them and then present all of them together to create a single polished plot. scale_x_continuous, scale_x_discrete scale_y_continuous, scale_y_continuous We highly recommend using the scales package when plotting. It comes with a variety of functions to make the scale of axes easier to read. labs() guide() "],
["faceting-data-by-group.html", "3.4 Faceting Data by Group", " 3.4 Faceting Data by Group A common research question is comparing a response across groups. The best way to visualize these relationships is to use the facet_grid() function. A facet creates a panel of plots with one for each value in the grouping variable. In the example below we have created a histogram for each Species in the iris dataset (NOTE: REPLACE WITH MKTING EXAMPLE). One important aspect to remember when creating facet charts is the scale of the axes. You can accidentally, and purposefully, mislead readers by having the same metric plotted on two different axis scales. IS THIS THE default behavior for the facet_grid() The syntax for facetting data has changed over time, from formula notation to a newer style. You may see examples online that use this older notation like so facet_grid(.~var). This is equivalent to facet_grid(cols=vars(var)). "],
["chart-types.html", "3.5 Chart Types", " 3.5 Chart Types Marketing Specific Charts? pie chart? a critique on pie charts "],
["advanced-plotting.html", "3.6 Advanced Plotting", " 3.6 Advanced Plotting theme_blank() ggthemes annotating? typically needing long format? gather? extentions? We would be remiss not to mention the amazing collection of open source “extensions” that make it easier to produce beautiful plots. These are ggextentions. "],
["datatransformation.html", "4 Preparing and Transforming Data", " 4 Preparing and Transforming Data It is a common adage that data analysts spend 80% of their time cleaning data and only 20% on value-add analysis. In this chapter we will show the basics of transforming data with the tidyverse package dplyr. Using these functions are the best way to reduce the overall amount of time spent on data cleaning and to create reproducible workflows whenever you receive new data. "],
["data-pipelines.html", "4.1 Data Pipelines", " 4.1 Data Pipelines Before diving into the functions designed to help you transform data, we must cover a perculiar looking operator, the pipe or %&gt;%. You will repeatedly see the pipe (%&gt;%) used in the code examples for this chapter and in other parts of the book. This operator takes output from the function on its left side and passes it onto the function on its right side. As an example we will look at the select() function. The first argument in the function is .data. Whenever you use the pipe operator it will pass that output into the function’s first argument, which in this case, is a tbl_df. This means that we must put a tbl_df object (a dataset) on the left side of the pipe operator and then the select() function on the right. The first argument is assumed to be the data, so the remaining argument inside the function, according to the documentation, should be one or more unquoted variable names or numbers representing the position of columns. If we put this together, the command looks like this: library(tidyverse) as_tibble(iris) %&gt;% select(Petal.Length, Sepal.Length, Species) #&gt; # A tibble: 150 x 3 #&gt; Petal.Length Sepal.Length Species #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; #&gt; 1 1.4 5.1 setosa #&gt; 2 1.4 4.9 setosa #&gt; 3 1.3 4.7 setosa #&gt; 4 1.5 4.6 setosa #&gt; 5 1.4 5 setosa #&gt; 6 1.7 5.4 setosa #&gt; # ... with 144 more rows The pipe is the glue for putting together multiple data transformations into a sequence. The benefits to using the pipe are that it reduces the amount of code needed to perform a sequence of operations. "],
["selecting.html", "4.2 Selecting", " 4.2 Selecting It is common to have a dataset with more columns than you need or have helper columns that you’ve created but no longer need. In the section above we used the select() function allows you to select only the columns that you want. as_tibble(iris) %&gt;% select(Petal.Length, Sepal.Length, Species) #&gt; # A tibble: 150 x 3 #&gt; Petal.Length Sepal.Length Species #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; #&gt; 1 1.4 5.1 setosa #&gt; 2 1.4 4.9 setosa #&gt; 3 1.3 4.7 setosa #&gt; 4 1.5 4.6 setosa #&gt; 5 1.4 5 setosa #&gt; 6 1.7 5.4 setosa #&gt; # ... with 144 more rows The select function has the nice feature of also being able to rename columns as you select them. For example, as_tibble(iris) %&gt;% select(Petal.Length, Sepal.Length, Species) #&gt; # A tibble: 150 x 3 #&gt; Petal.Length Sepal.Length Species #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; #&gt; 1 1.4 5.1 setosa #&gt; 2 1.4 4.9 setosa #&gt; 3 1.3 4.7 setosa #&gt; 4 1.5 4.6 setosa #&gt; 5 1.4 5 setosa #&gt; 6 1.7 5.4 setosa #&gt; # ... with 144 more rows There is another function in dplyr called rename(), however, this can conflict with a function in the plyr package also named rename() if you have both packages loaded at the same time. To avoid any confusion, you can reference the function you want using the package name and a double colon before the function like so, dplyr::rename(). This notation specifies the function and where to retrieve its definition, in this case, the dplyr package. If you would like to avoid these sorts of package function conflicts, using just the select() function will do everything and a little bit more than using the rename() function. For example, rename() keeps all variables if you just specify one, then it will rename that one variable. The select() function will drop all other variables, but you can work around this by supplying the everything() function into select(). The everything() select helper is not the only one. There are helper functions that match columns by name, numerical range, prefix, suffix and more. In the example below we are renaming the id column, then pulling any of columns with “var” in the name, then everything else. as_tibble(iris) %&gt;% select(flower=Species, contains(&quot;Petal&quot;), everything()) #&gt; # A tibble: 150 x 5 #&gt; flower Petal.Length Petal.Width Sepal.Length Sepal.Width #&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 setosa 1.4 0.2 5.1 3.5 #&gt; 2 setosa 1.4 0.2 4.9 3 #&gt; 3 setosa 1.3 0.2 4.7 3.2 #&gt; 4 setosa 1.5 0.2 4.6 3.1 #&gt; 5 setosa 1.4 0.2 5 3.6 #&gt; 6 setosa 1.7 0.4 5.4 3.9 #&gt; # ... with 144 more rows FIND EXAMPLE THAT MATCHES TEXT ABOVE IT "],
["mutating.html", "4.3 Mutating", " 4.3 Mutating Mutating a variable means changing a variable in place or creating a new variable. You can think of this as modifying the dataset you provide to the function and the variables of the dataset are the part that is changing or “mutating”. In the following example we’ll show in one step how to change an existing variable and create a new one. If you are a frequent user of Excel, the mutate() function is how you can implement the logic of an IF statement. In the example below we create a 0/1 indicator variable based on another column. In Excel you would implement this as IF(A2=&quot;Yes&quot;, 1, 0). Another common data transformation exercise is recoding data. Instead of creating a series of nested IFs in Excel or in R, you can leverage the recode() function inside of mutate(). In this example we are changing the survey response choice labels to numbers so that we can calculate summary statistics, like the mean and standard deviation of responses. # mutate(response = recode(response, # `Strongly Agree` = 6, # `Agree` = 5, # `Slightly Agree` = 4, # `Slightly Disagree` = 3, # `Disagree` = 2, # `Strongly Disagree` = 1)) If you have many questions and would like to them all in one pass, then you can implement it like this… [WHAT IS THE TRICK HERE?] VLOOKUP -&gt; left_join() We will discuss relational data and joins in more detail in Chapter 5 As a final note on mutating variables, be careful not to use the transmute() function unless you intend to keep only the variables that the function creates, while dropping the rest from your dataset. "],
["grouped-mutates.html", "4.4 Grouped Mutates", " 4.4 Grouped Mutates A particularly challenging type of transformation in Excel is creating variables based on a group of records and applying it across all rows for the group. For example, calculating the difference between an individual’s maximum value compared to all other values. This requires finding the maximum for the group, then comparing it with each observation for the group. Typically, you might accomplish this through the creation of a Pivot Table and then using VLOOKUP to reference the maximum per individual. This gets unwieldly (sp) when then data changes. In R you can take the observations in a dataset and put them into groups based on a variable. In the example below, we have simply taken the dataset and modified it to remember that operations should be done in their respective group. Nothing has actually been changed on the data yet, but it is ready for an operation that acts upon the grouped data. The next step is to create that variable we mentioned above that represents the difference between the maximum value for the individual and each of their corresponding observations. In this example, we’ll also create another variable indicating TRUE/FALSE whether the row is the maximum to provide a visual cue and filtering mechanism to throw out those specific observations if desired. # dat %&gt;% # group_by() "],
["summarizing.html", "4.5 Summarizing", " 4.5 Summarizing In the spirit of transforming data we will talk about summarizing it. A summary is just a transformation of underlying source data to a new form. Before summarizing data you must have an idea about HOW to summarize it first. Do you want to count rows, unique instances, calculate the COUNTIF/SUMIF/PIVOT -&gt; group_by() + summarize() In continuing with the references with Excel there is the capability to filter data in your summarizes, just how a Pivot Table allows you to identify variables to filter on. In a general sense, filtering just means that you remove any rows from a dataset that meet a certain criteria. "],
["spread-and-gather.html", "4.6 Spread and Gather", " 4.6 Spread and Gather One particular type of transformation is moving the data between a long format and a wide format. In the long format you have one row per value where the values may be a different group or metric as indicated by another column in the data. For example, [INCLUDE LONG EXAMPLE] This is the preferred "],
["functions.html", "4.7 Functions", " 4.7 Functions In some cases "],
["relational.html", "5 Relational Data", " 5 Relational Data The major topic areas are provided below. "],
["tidy-principles.html", "5.1 Tidy Principles", " 5.1 Tidy Principles How to store the data (what is a row and what is a column) "],
["relational-structures.html", "5.2 Relational Structures", " 5.2 Relational Structures data integrity, the role of keys, ER diagram spread, gather conversation with normalization backdrop Excel Conversion IF -&gt; ifelse() VLOOKUP -&gt; left_join() "],
["joins.html", "5.3 Joins", " 5.3 Joins Left, Outer, Inner, Anti "],
["measures.html", "6 Measures in Marketing", " 6 Measures in Marketing The major topic areas are provided below. "],
["net-promoter-score.html", "6.1 Net Promoter Score", " 6.1 Net Promoter Score Other measure types Likert Scale, Distributionally, Mean, Top 2 Box "],
["customer-lifetime-value.html", "6.2 Customer Lifetime Value", " 6.2 Customer Lifetime Value "],
["customer-satisfactioncustomer-delight.html", "6.3 Customer Satisfaction/Customer Delight", " 6.3 Customer Satisfaction/Customer Delight "],
["others-consult-ama-dictionary-for-more.html", "6.4 Others? Consult AMA dictionary for more?", " 6.4 Others? Consult AMA dictionary for more? "],
["fieldexp.html", "7 Conducting Marketing Field Experiment", " 7 Conducting Marketing Field Experiment THINGS PROVIDED BELOW THIS LINE ARE FOR EXAMPLE ONLY. NOT REAL CONTENT We have finished a nice book. "],
["mix.html", "8 Understanding Marketing Mix", " 8 Understanding Marketing Mix THINGS PROVIDED BELOW THIS LINE ARE FOR EXAMPLE ONLY. NOT REAL CONTENT We have finished a nice book. "],
["trade.html", "9 Pricing and Merchandising", " 9 Pricing and Merchandising THINGS PROVIDED BELOW THIS LINE ARE FOR EXAMPLE ONLY. NOT REAL CONTENT We have finished a nice book. "],
["machinelearning.html", "10 Machine Learning in Marketing", " 10 Machine Learning in Marketing THINGS PROVIDED BELOW THIS LINE ARE FOR EXAMPLE ONLY. NOT REAL CONTENT We have finished a nice book. "],
["action.html", "11 Moving from Data to Action", " 11 Moving from Data to Action THINGS PROVIDED BELOW THIS LINE ARE FOR EXAMPLE ONLY. NOT REAL CONTENT We have finished a nice book. "]
]
